version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod  
    command: gunicorn --bind 0.0.0.0:8000 --workers 3 your_project.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - app-network

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
    networks:
      - app-network

  db:
    image: postgres:14
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # Para backups
    networks:
      - app-network
    # No exponemos el puerto externamente en producción

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - app-network
    # Para caché y sesiones

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  caddy_data:
  caddy_config:

networks:
  app-network:
    driver: bridge